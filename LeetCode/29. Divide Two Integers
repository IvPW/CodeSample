/*
Given two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator.

The integer division should truncate toward zero, which means losing its fractional part. For example, 8.345 would be truncated to 8, and -2.7335 would be truncated to -2.

Return the quotient after dividing dividend by divisor.

Note: Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [−231, 231 − 1]. For this problem, if the quotient is strictly greater than 231 - 1, then return 231 - 1, and if the quotient is strictly less than -231, then return -231.
*/

class Solution {
//Time: O(logN) Space:O(1)
public:

    unsigned int reverseNumber(int input)
    {
        return  (unsigned int)0 - input;
    }

    int divide(int dividend, int divisor) {

        //handle edge cases
        if(divisor == 0)
        {
            return 0;
        }

        if(divisor == 1)
        {
            return dividend;
        }

        if(divisor == -1 && dividend == INT_MIN)
        {
            return INT_MAX;
        }

        if(divisor == dividend)
        {
            return 1;
        }

        bool positiveResult = true;
        if((dividend < 0 && divisor > 0) ||(dividend > 0 && divisor < 0) )
        {
            positiveResult = false;
        }

        int result = 0;
        unsigned int a = dividend < 0? reverseNumber(dividend) : dividend;
        unsigned int b = divisor < 0? reverseNumber(divisor) : divisor;


        while(a >= b)
        {
            // find the largest b*2*count that is smaller than a
            int count = 0;
            while(a > (b << (count + 1)))
            {
                count++;
            }

            a -= (b << count);
            result += (1 << count);
        }

        if(positiveResult == false)
        {
            result = 0 - result;
        }

        return result;
    }
};
